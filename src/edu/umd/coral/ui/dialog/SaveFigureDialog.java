/*******************************************************************************
 * Copyright (c) 2012 Darya Filippova.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Public License v3.0
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/gpl.html
 * 
 * Contributors:
 *     Darya Filippova - initial API and implementation
 ******************************************************************************/
package edu.umd.coral.ui.dialog;

import java.awt.Dimension;
import java.awt.Frame;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.image.RenderedImage;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.WindowConstants;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;

import edu.umd.coral.model.DataModel;

public class SaveFigureDialog extends JDialog implements ActionListener, KeyListener {

	private static final long serialVersionUID = 958293496362730699L;
	private JButton fileNavigateBtn;
	private JButton cancelBtn;
	private JButton okBtn;
	private JComboBox fileFormat;
	private JTextField filenameField;
	private DataModel model;
	private RenderedImage image;

	/** Creates new form SaveFigureDialog */
	public SaveFigureDialog(Frame parent, boolean modal, DataModel model, RenderedImage image) {
		super(parent, modal);
		initComponents();
		this.model = model;
		this.image = image;
		this.addKeyListener(this);
		
		this.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {
		GridBagConstraints gridBagConstraints;

		JLabel jLabel1 = new JLabel("Save as:");
		filenameField = new JTextField();
		fileNavigateBtn = new JButton("Choose...");
		String [] formats = {"png"}; 
		fileFormat = new JComboBox(formats);
		fileFormat.setPreferredSize(new Dimension(75, 27));
		
		cancelBtn = new JButton("Cancel");
		okBtn = new JButton("Save");
		okBtn.addActionListener(this);

		setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
		getContentPane().setLayout(new GridBagLayout());

		gridBagConstraints = new GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;
		gridBagConstraints.insets = new Insets(26, 20, 0, 0);
		getContentPane().add(jLabel1, gridBagConstraints);
		gridBagConstraints = new GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.gridheight = 2;
		gridBagConstraints.ipadx = 174;
		gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;
		gridBagConstraints.insets = new Insets(20, 10, 0, 0);
		getContentPane().add(filenameField, gridBagConstraints);

		fileNavigateBtn.addActionListener(this);
		gridBagConstraints = new GridBagConstraints();
		gridBagConstraints.gridx = 3;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.gridheight = 4;
		gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;
		gridBagConstraints.insets = new Insets(21, 6, 0, 17);
		getContentPane().add(fileNavigateBtn, gridBagConstraints);

		gridBagConstraints = new GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.gridheight = 3;
		gridBagConstraints.ipadx = -8;
		gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;
		gridBagConstraints.insets = new Insets(22, 9, 0, 0);
		getContentPane().add(fileFormat, gridBagConstraints);

		cancelBtn.addActionListener(this);
		gridBagConstraints = new GridBagConstraints();
		gridBagConstraints.gridx = 3;
		gridBagConstraints.gridy = 4;
		gridBagConstraints.ipadx = 17;
		gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;
		gridBagConstraints.insets = new Insets(18, 6, 17, 17);
		getContentPane().add(cancelBtn, gridBagConstraints);

		okBtn.setText("Save");
		gridBagConstraints = new GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 4;
		gridBagConstraints.ipadx = 13;
		gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;
		gridBagConstraints.insets = new Insets(18, 9, 17, 0);
		getContentPane().add(okBtn, gridBagConstraints);

		pack();
	}// </editor-fold>

	public void actionPerformed(ActionEvent e) {
		Object source = e.getSource();
		if (source == this.fileNavigateBtn) {
			FileFilter filter = new FileNameExtensionFilter("PNG file", "png");
			JFileChooser fc = new JFileChooser(model.getLastPath());
			fc.addChoosableFileFilter(filter);
			int retVal = fc.showSaveDialog(this);
			if (retVal != JFileChooser.APPROVE_OPTION)
				return;
			File f = fc.getSelectedFile();
			try {
				String s = f.getCanonicalPath();
				filenameField.setText(s);
			} catch (IOException e1) {
				e1.printStackTrace();
			}
		}
		else if (source == this.okBtn) {
			// save the image
			String name = this.filenameField.getText();
			String fileformat = (String) this.fileFormat.getSelectedItem();
			try {
				ImageIO.write(image, fileformat, new File(name));
				this.setVisible(false);
				this.dispose();
			} catch (IOException e1) {
				JOptionPane.showMessageDialog(this,
					    "Could not save file",
					    "Error",
					    JOptionPane.ERROR_MESSAGE);
				e1.printStackTrace();
			}
		}
		else if (source == this.cancelBtn) {
			this.setVisible(false);
			this.dispose();
		}
	}

	public void keyPressed(KeyEvent arg0) {
		// TODO Auto-generated method stub
		
	}

	public void keyReleased(KeyEvent arg0) {
		// TODO Auto-generated method stub
		
	}

	public void keyTyped(KeyEvent e) {
		if (KeyEvent.VK_ESCAPE == e.getKeyCode() ) {
			this.setVisible(false);
			this.dispose();
		}
	}
}
